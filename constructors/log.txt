 GUIDE Classification and Regression Trees and Forests
 Version 23.0 (Build date: September 15, 2016)     
 Compiled with GFortran 5.2.1 on Ubuntu 15.10
 Copyright (c) 1997-2016 Wei-Yin Loh. All rights reserved.
 This software is based upon work supported by the U.S. Army Research Office,
 the National Science Foundation and the National Institutes of Health.
  
 Choose one of the following options:
 0. Read the warranty disclaimer
 1. Create an input file for batch run
 2. Fit a model without creating input file
 3. Convert data to other formats without creating input file
 4. Variable importance scoring or differential item functioning (DIF)
    without creating input file (DIF is experimental)
 Input your choice:  Batch run with input file 
 Input 1 for model fitting, 2 for importance or DIF scoring, 3 for data conversion:  1
 Output file is out.txt
  
 Input 1 for single tree, 2 for ensemble of trees:  1
 Input 1 for classification, 2 for regression, 3 for propensity score grouping
 (propensity score grouping is an experimental option)
 Input your choice:  1
 Input 1 for simple, 2 for nearest-neighbor, 3 for kernel method:  1
 Input 0 for linear, interaction and univariate splits (in this order),
       1 for univariate, linear and interaction splits (in this order),
       2 to skip linear splits,
       3 to skip linear and interaction splits:   3
 Input 1 to prune by CV, 2 by test sample, 3 for no pruning:  1
  
 Input name of data description file (max 100 characters);
 enclose with matching quotes if it has spaces: dsc.txt
 Reading data description file ...
 Training sample file: data.txt
 Missing value code: ?
 Records in data file start on line 1
 Warning: N variables changed to S
 Dependent variable is Class
 Reading data file ...
 Number of records in data file: 1381
 Length of longest data entry: 1
 Checking for missing values ...
 Total number of cases: 1381
 Number of classes =            4
 Re-checking data ...
 Assigning codes to categorical and missing values
 Finished checking data
 Rereading data
 Class      #Cases    Proportion
 0             967    0.70021723
 1             307    0.22230268
 2              55    0.03982621
 3              52    0.03765387
      Total  #cases w/   #missing
     #cases    miss. D  ord. vals   #X-var   #N-var   #F-var   #S-var   #B-var   #C-var
       1381          0          0        0        0        0        6        0        0
 No. cases used for training: 1381
 Finished reading data file
 Univariate split highest priority
 No interaction and linear splits
 Input number of cross-validations:  10
 Selected tree is based on mean of CV estimates
 Input number of SEs for pruning:   0.50000000000000000     
 Choose 1 for estimated priors, 2 for equal priors, 3 for priors from a file
 Input 1, 2, or 3: 1
 Choose 1 for unit misclassification costs, 2 to input costs from a file
 Input 1 or 2: 1
 Choose a split point selection method for numerical variables:
 Choose 1 to use faster method based on sample quantiles
 Choose 2 to use exhaustive search
 Input 1 or 2: 2
 Input 1 for LaTeX tree code, 2 to skip it: 2
 You can store the variables and/or values used to split and fit in a file
 Choose 1 to skip this step, 2 to store split and fit variables,
 3 to store split variables and their values
 Input your choice:  1
 Input 2 to save fitted values and node IDs; 1 otherwise:  1
 Input 2 to save terminal node IDs for importance scoring; 1 otherwise:  1
 Input 2 to write R function for predicting new cases, 1 otherwise:  1
 Constructing main tree ...
 Number of terminal nodes of largest tree: 41
 Performing cross-validation:
 Finished cross-validation iteration 1
 Finished cross-validation iteration 2
 Finished cross-validation iteration 3
 Finished cross-validation iteration 4
 Finished cross-validation iteration 5
 Finished cross-validation iteration 6
 Finished cross-validation iteration 7
 Finished cross-validation iteration 8
 Finished cross-validation iteration 9
 Finished cross-validation iteration 10
  
 Pruning main tree.  Please wait.
 Results of subtree sequence
 Trees based on mean with naive SE are marked with * and **
 Tree based on mean with bootstrap SE is marked with --
 Trees based on median with finite bootstrap SE are marked with + and ++
    Subtree        #Terminal nodes
      1                    40
      2                    39
      3                    37
      4                    36
      5                    35
      6                    34
      7                    33
      8                    32
      9                    31
     10                    30
     11++                  29
     12                    27
     13**                  25
     14                    22
     15                    19
     16                    17
     17                    15
     18                    14
     19                    13
     20                    12
     21                    10
     22                     8
     23                     7
     24                     5
     25                     3
     26                     1
 * tree same as + tree
 ++ tree same as -- tree
 + tree same as ++ tree
 * tree same as ++ tree
 * tree same as -- tree
  
 Results are stored in out.txt
 Elapsed time in seconds:   0.228000000    
